---
source: src/highlight/mod.rs
---
<pre id="5e845049255f423296fd6f20449be0bc" class="rust"><code class="rust"><span class="keyword">use</span> <span class="namespace"><span class="variable">std</span><span class="punctuation">::</span><span class="variable">iter</span></span><span class="punctuation">::</span><span class="punctuation">{</span><span class="variable builtin">self</span>, <span class="type">Map</span><span class="punctuation">}</span><span class="punctuation">;</span>

<span class="keyword">const</span> <span class="constant">COOL</span>: <span class="operator">&amp;</span><span class="type builtin">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">;</span>

<span class="attribute">#<span class="punctuation">[</span><span class="variable">derive</span><span class="punctuation">(</span><span class="type">Debug</span><span class="punctuation">)</span><span class="punctuation">]</span></span>
<span class="keyword">struct</span> <span class="type">Abc</span> <span class="punctuation">{</span>
    <span class="variable">field</span>: <span class="type builtin">i32</span>,
<span class="punctuation">}</span>

<span class="comment">/// Doc comment!</span>
<span class="keyword">enum</span> <span class="type">Xyz</span> <span class="punctuation">{</span>
    <span class="type">XVariant</span> <span class="punctuation">{</span> <span class="variable">field</span>: <span class="type builtin">u32</span> <span class="punctuation">}</span>,
    <span class="type">YVariant</span><span class="punctuation">(</span><span class="type builtin">f32</span><span class="punctuation">)</span>,
    <span class="type">ZVariant</span>,
<span class="punctuation">}</span>

<span class="attribute">#<span class="punctuation">[</span><span class="variable">some_attr_macro</span><span class="punctuation">]</span></span>
<span class="keyword">fn</span> <span class="function">other_fn</span><span class="punctuation">&lt;</span><span class="label"><span class="operator">&#39;</span><span class="variable">a</span></span>, <span class="type">T</span><span class="punctuation">&gt;</span><span class="punctuation">(</span>
    <span class="variable">arg1</span>: <span class="operator">&amp;</span><span class="label"><span class="operator">&#39;</span><span class="variable">a</span></span> <span class="keyword">mut</span> <span class="type">T</span>,
    <span class="variable">arg2</span>: <span class="type">String</span>,
    <span class="variable">arg3</span>: <span class="operator">&amp;</span><span class="label"><span class="operator">&#39;</span><span class="variable">static</span></span> <span class="type builtin">str</span>,
<span class="punctuation">)</span> <span class="operator">-&gt;</span> <span class="keyword">impl</span> <span class="type">Iterator</span><span class="punctuation">&lt;</span><span class="type">Item</span> <span class="operator">=</span> <span class="type">String</span><span class="punctuation">&gt;</span>
<span class="keyword">where</span>
    <span class="type">T</span>: <span class="type">Debug</span>,
<span class="punctuation">{</span>
<span class="punctuation">}</span>

<span class="keyword">pub</span> <span class="keyword">trait</span> <span class="type">Widget</span> <span class="punctuation">{</span>
    <span class="keyword">fn</span> <span class="function">render</span><span class="punctuation">(</span><span class="variable builtin">self</span>, <span class="variable">area</span>: <span class="type">Rect</span>, <span class="variable">buf</span>: <span class="operator">&amp;</span><span class="keyword">mut</span> <span class="type">Buffer</span><span class="punctuation">)</span><span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="comment">// This is the main function</span>
<span class="keyword">fn</span> <span class="function">main</span><span class="punctuation">(</span><span class="punctuation">)</span> <span class="punctuation">{</span>
    <span class="comment">// Statements here are executed when the compiled binary is called</span>
    <span class="comment">// Print text to the console</span>
    <span class="function macro">println</span><span class="function macro">!</span><span class="punctuation">(</span><span class="string">&quot;Hello World!&quot;</span><span class="punctuation">)</span><span class="punctuation">;</span>

    <span class="keyword">let</span> <span class="variable">logical</span>: <span class="type builtin">bool</span> <span class="operator">=</span> <span class="constant">true</span> <span class="operator">||</span> <span class="constant">false</span> <span class="operator">&amp;&amp;</span> <span class="constant">true</span><span class="punctuation">;</span>
    <span class="keyword">let</span> <span class="variable">a_float</span>: <span class="type builtin">f64</span> <span class="operator">=</span> <span class="constant numeric">1.0</span> <span class="operator">+</span> <span class="constant numeric">2.0</span> <span class="operator">*</span> <span class="constant numeric">3.0</span><span class="punctuation">;</span> <span class="comment">// Regular annotation</span>
    <span class="keyword">let</span> <span class="keyword">mut</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="constant numeric">5i32</span> <span class="keyword">as</span> <span class="type builtin">f32</span><span class="punctuation">;</span>
    <span class="keyword">let</span> <span class="keyword">mut</span> <span class="variable">boolean</span>: <span class="type builtin">bool</span> <span class="operator">=</span> <span class="variable">a_float</span> <span class="keyword">as</span> <span class="type builtin">i32</span> <span class="operator">&gt;</span> <span class="constant numeric">5</span><span class="punctuation">;</span>

    <span class="keyword">let</span> <span class="punctuation">(</span><span class="variable">x</span>, <span class="variable">y</span>, <span class="variable">z</span><span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">(</span><span class="punctuation">[</span><span class="constant numeric">1</span>, <span class="constant numeric">2</span>, <span class="constant numeric">3</span><span class="punctuation">]</span>, <span class="punctuation">[</span><span class="constant numeric">4</span>, <span class="constant numeric">5</span><span class="punctuation">]</span>, <span class="punctuation">[</span><span class="constant numeric">6</span><span class="punctuation">]</span><span class="punctuation">)</span><span class="punctuation">;</span>

    <span class="keyword">match</span> <span class="variable">x</span> <span class="punctuation">{</span>
        <span class="punctuation">[</span><span class="constant numeric">1</span>, <span class="operator">..</span><span class="punctuation">]</span> <span class="operator">=&gt;</span> <span class="punctuation">{</span>
            <span class="function macro">println</span><span class="function macro">!</span><span class="punctuation">(</span><span class="string">&quot;{}&quot;</span>, <span class="constant numeric">1</span><span class="punctuation">)</span><span class="punctuation">;</span>
        <span class="punctuation">}</span>
        <span class="punctuation">[</span><span class="constant numeric">2</span> <span class="operator">|</span> <span class="constant numeric">3</span>, <span class="operator">..</span><span class="punctuation">]</span> <span class="operator">=&gt;</span> <span class="punctuation">{</span><span class="punctuation">}</span>
        <span class="punctuation">[</span><span class="constant numeric">4</span>, <span class="variable">x</span>, <span class="variable">y</span><span class="punctuation">]</span> <span class="keyword">if</span> <span class="variable">x</span> <span class="operator">==</span> <span class="variable">y</span> <span class="operator">=&gt;</span> <span class="punctuation">{</span><span class="punctuation">}</span>
        <span class="variable">n</span> <span class="operator">@</span> <span class="punctuation">[</span><span class="constant numeric">10</span>, <span class="operator">..</span><span class="punctuation">]</span> <span class="operator">=&gt;</span> <span class="punctuation">{</span><span class="punctuation">}</span>
        _ <span class="operator">=&gt;</span> <span class="punctuation">{</span><span class="punctuation">}</span>
    <span class="punctuation">}</span><span class="punctuation">;</span>

    <span class="keyword">if</span> <span class="variable">logical</span> <span class="punctuation">{</span>
        <span class="keyword">for</span> <span class="variable">something</span> <span class="keyword">in</span> <span class="variable">x</span> <span class="punctuation">{</span>
            <span class="keyword">loop</span> <span class="punctuation">{</span>
                <span class="keyword">break</span><span class="punctuation">;</span>
            <span class="punctuation">}</span>
        <span class="punctuation">}</span>
    <span class="punctuation">}</span>

    <span class="punctuation">(</span><span class="constant numeric">1</span><span class="operator">..</span><span class="constant numeric">10</span><span class="punctuation">)</span><span class="punctuation">.</span><span class="function">map</span><span class="punctuation">(</span><span class="punctuation">|</span><span class="variable">x</span><span class="punctuation">|</span> <span class="variable">x</span> <span class="operator">*</span> <span class="constant numeric">3</span><span class="punctuation">)</span><span class="punctuation">.</span><span class="function">collect</span><span class="punctuation turbofish">::</span><span class="punctuation turbofish">&lt;</span><span class="type">Vec</span><span class="punctuation">&lt;</span><span class="type">_</span><span class="punctuation">&gt;</span><span class="punctuation turbofish">&gt;</span><span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">;</span>

    <span class="keyword">match</span> <span class="type">Xyz</span> <span class="punctuation">{</span>
        <span class="constructor">XVariant</span> <span class="punctuation">{</span> <span class="variable">field</span> <span class="punctuation">}</span> <span class="operator">=&gt;</span> <span class="punctuation">{</span><span class="punctuation">}</span>
        <span class="constructor">YVariant</span><span class="punctuation">(</span><span class="variable">whatever</span><span class="punctuation">)</span> <span class="operator">=&gt;</span> <span class="punctuation">{</span><span class="punctuation">}</span>
        <span class="type">ZVariant</span> <span class="operator">=&gt;</span> <span class="punctuation">{</span><span class="punctuation">}</span>
        <span class="variable">fallback</span> <span class="operator">=&gt;</span> <span class="punctuation">{</span><span class="punctuation">}</span>
    <span class="punctuation">}</span><span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="keyword">macro_rules!</span> <span class="function macro">print_result</span> <span class="punctuation">{</span>
    <span class="punctuation">(</span><span class="variable">$expression</span>:<span class="type">expr</span><span class="punctuation">)</span> <span class="operator">=&gt;</span> <span class="punctuation">{</span>
        <span class="variable">println</span>!<span class="punctuation">(</span><span class="string">&quot;{:?} = {:?}&quot;</span>, <span class="variable">stringify</span>!<span class="punctuation">(</span><span class="variable">$expression</span><span class="punctuation">)</span>, <span class="variable">$expression</span><span class="punctuation">)</span>;
    <span class="punctuation">}</span><span class="punctuation">;</span>
<span class="punctuation">}</span>

<span class="attribute">#<span class="punctuation">[</span><span class="variable">cfg</span><span class="punctuation">(</span><span class="variable">test</span><span class="punctuation">)</span><span class="punctuation">]</span></span>
<span class="keyword">mod</span> <span class="namespace">tests</span> <span class="punctuation">{</span>
    <span class="keyword">use</span> <span class="keyword"><span class="namespace">super<span class="punctuation">::</span><span class="variable">other_fn</span></span></span><span class="punctuation">;</span>

    <span class="attribute">#<span class="punctuation">[</span><span class="variable">test</span><span class="punctuation">]</span></span>
    <span class="keyword">fn</span> <span class="function">welp</span><span class="punctuation">(</span><span class="punctuation">)</span> <span class="punctuation">{</span><span class="punctuation">}</span>
<span class="punctuation">}</span>
</code></pre>
